pragma solidity ^0.8.0;
// From chatgpt
contract BalanceTracker {
    mapping(address => uint256) private balances;
    bool private locked;

    event Deposit(address indexed from, uint256 value);
    event Withdrawal(address indexed to, uint256 value);

    function getBalance(address addr) public view returns (uint256) {
        return balances[addr];
    }

    function deposit() public payable {
        require(!locked, "Function locked");
        require(msg.value > 0, "Deposit amount must be greater than 0");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) public {
        require(!locked, "Function locked");
        require(amount > 0, "Withdraw amount must be greater than 0");
        require(amount <= balances[msg.sender], "Insufficient balance");
        locked = true;
        balances[msg.sender] -= amount;
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
        emit Withdrawal(msg.sender, amount);
        locked = false;
    }

    function splitTransaction(uint256 amount, address[] memory addresses) public {
        require(!locked, "Function locked");
        require(amount > 0, "Amount must be greater than 0");
        require(addresses.length > 0, "Addresses list cannot be empty");
        uint256 splitAmount = amount / addresses.length;
        require(splitAmount > 0, "Split amount must be greater than 0");
        locked = true;
        balances[msg.sender] -= amount;
        for (uint256 i = 0; i < addresses.length; i++) {
            require(addresses[i] != address(0), "Invalid address");
            (bool success, ) = addresses[i].call{value: splitAmount}("");
            require(success, "Transfer failed");
        }
        locked = false;
    }

    function splitTransactionMiddleMan(uint256 amount, address middleMan, uint256 percentageCut, address[] memory addresses) public {
        require(!locked, "Function locked");
        require(amount > 0, "Amount must be greater than 0");
        require(middleMan != address(0), "Invalid middle man address");
        require(percentageCut >= 0 && percentageCut <= 100, "Invalid percentage cut");
        require(addresses.length > 0, "Addresses list cannot be empty");
        uint256 cutAmount = amount * percentageCut / 100;
        require(cutAmount > 0, "Cut amount must be greater than 0");
        require(cutAmount <= balances[msg.sender], "Insufficient balance");
        locked = true;
        balances[msg.sender] -= cutAmount;
        (bool success, ) = middleMan.call{value: cutAmount}("");
        require(success, "Transfer failed");
        uint256 remainingAmount = amount - cutAmount;
        splitTransaction(remainingAmount, addresses);
        locked = false;
    }
}
