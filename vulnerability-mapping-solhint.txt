RQ1: Can static code analysis perform automatic program repair of various solidity contract vulnerabilities?
RQ1.1: What percentage of contracts can our apr tool generate valid solidity contracts with the vulnerabilities our tool can handle removed?
R1.2: What type of solidity vulnerabilities can our static apr apply fixes for?

RQ2: How does our method of apr for solidity vulnerabilities compare to the current research of the different approaches an apr tool fixes a program?


TD: Timestamp Dependency, Solhint: not-rely-on-time, blockid

UcC: Unchecked Call, Solhint: check-send-result
TO: Transaction Origin, Solhint avoid-tx-origin
RE reentrancy, Solhint: reentrancy

DC: Delegate Call, Solhint: avoid-low-level-calls


TOD: Transaction Ordering Dependency, Solhint: no matches
IOU: Integer Overflow / Underflow, Solhint: no matches
NC: Nested Call, Solhint: no matches
FE: Frozen Ether, Solhint: no matches
UpS: Unprotected Suicide, Solhint: no matches
Automatic program repair

Presentation of how your solution places between the current state of the art. Demo of your program



