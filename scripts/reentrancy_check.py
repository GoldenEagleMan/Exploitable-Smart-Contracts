contract = '''(sourceUnit (pragmaDirective pragma (pragmaName (identifier solidity)) (pragmaValue (version (versionConstraint 0.8.13))) ;) (contractDefinition contract (identifier InsecureEtherVault) { (contractPart (stateVariableDeclaration (typeName (mapping mapping ( (elementaryTypeName address) => (typeName (elementaryTypeName uint256)) ))) private (identifier userBalances) ;)) (contractPart (functionDefinition function (identifier deposit) (parameterList ( )) (modifierList external (stateMutability payable)) (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier userBalances))) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) += (expression (expression (primaryExpression (identifier msg))) . (identifier value))) ;))) }))) (contractPart (functionDefinition function (identifier withdrawAll) (parameterList ( )) (modifierList external) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier balance)) = (expression (expression (primaryExpression (identifier getUserBalance))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier msg))) . (identifier sender)))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier balance))) > (expression (primaryExpression (numberLiteral 0)))) , (expression (primaryExpression "Insufficient balance")))) )) ;))) (statement (simpleStatement (variableDeclarationStatement ( (variableDeclarationList (variableDeclaration (typeName (elementaryTypeName bool)) (identifier success)) ,) ) = (expression (expression (expression (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) . (identifier call)) { (identifier value) : (expression (primaryExpression (identifier balance))) }) ( (functionCallArguments (expressionList (expression (primaryExpression "")))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier success))) , (expression (primaryExpression "Failed to send Ether")))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier userBalances))) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) = (expression (primaryExpression (numberLiteral 0)))) ;))) }))) (contractPart (functionDefinition function (identifier getBalance) (parameterList ( )) (modifierList external (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (returnStatement return (expression (expression (expression (primaryExpression (typeNameExpression (elementaryTypeName address)))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier this))))) )) . (identifier balance)) ;)) }))) (contractPart (functionDefinition function (identifier getUserBalance) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier _user)) )) (modifierList public (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (returnStatement return (expression (expression (primaryExpression (identifier userBalances))) [ (expression (primaryExpression (identifier _user))) ]) ;)) }))) }))'''


def check_reentrancy(contract):
    for contract_part in contract['contractParts']:
        if contract_part['nodeType'] == 'functionDefinition':
            function = contract_part['functionDefinition']
            if function['modifierList'][0]['stateMutability'] == 'external':
                for statement in function['block']['statements']:
                    if statement['nodeType'] == 'simpleStatement':
                        expression_statement = statement['simpleStatement']['expressionStatement']
                        if expression_statement['nodeType'] == 'expression':
                            expression = expression_statement['expression']
                            if expression['nodeType'] == 'expression':
                                if expression['expression']['primaryExpression']['identifier'] == 'send':
                                    print('Possible reentrancy vulnerability found in function:', function['identifier'])
                                    break
check_reentrancy(contract)
