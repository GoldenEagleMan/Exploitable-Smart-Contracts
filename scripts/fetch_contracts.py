import csv
import time
import requests
import os

# Etherscan API key
API_KEY = ""
WDIR = "/home/nikolas/Documents/smartcontracts/contractdb"
DIR = "/contracts"
EXP_DIR = "/exploitable"
UNEXP_DIR = "/unexploitable"
UNK_DIR = "/unknown_label"
UNCAT_DIR = "/uncategorized"
VULN_DIR_LIST = ["DC", "FE", "IOU", "NC", "RE", "TD", "TO", "TOD", "UcC", "UpS"]
SLEEP_TIME = 0.300
# get current date
TIME = time.strftime("%Y%m%d-%H%M%S")

exploitable_csv = [f for f in os.listdir(WDIR + "/categorized/exploitable") if not f.startswith('.')]
unexploitable_csv = [f for f in os.listdir(WDIR + "/categorized/unexploitable") if not f.startswith('.')]
unknown_label_csv = [f for f in os.listdir(WDIR + "/categorized/unknown_label") if not f.startswith('.')]
uncategorized_csv = [f for f in os.listdir(WDIR + "/categorized/uncategorized") if not f.startswith('.')]

# Create output folders 
if not os.path.exists(WDIR + DIR):
    os.mkdir(WDIR + DIR)
if not os.path.exists(WDIR + DIR + EXP_DIR):
    os.mkdir(WDIR + DIR + EXP_DIR)
if not os.path.exists(WDIR + DIR + UNEXP_DIR):
    os.mkdir(WDIR + DIR + UNEXP_DIR)
if not os.path.exists(WDIR + DIR + UNK_DIR):
    os.mkdir(WDIR + DIR + UNK_DIR)
if not os.path.exists(WDIR + DIR + UNCAT_DIR):
    os.mkdir(WDIR + DIR + UNCAT_DIR)
if not os.path.exists(WDIR + DIR + "/log"):
    os.mkdir(WDIR + DIR + "/log")
for vul_dir in VULN_DIR_LIST:
    if not os.path.exists(WDIR + DIR + EXP_DIR + "/" + vul_dir):
        os.mkdir(WDIR + DIR + EXP_DIR + "/" + vul_dir)
    if not os.path.exists(WDIR + DIR + UNEXP_DIR + "/" + vul_dir):
        os.mkdir(WDIR + DIR + UNEXP_DIR + "/" + vul_dir)
    if not os.path.exists(WDIR + DIR + UNK_DIR + "/" + vul_dir):
        os.mkdir(WDIR + DIR + UNK_DIR + "/" + vul_dir)
    if not os.path.exists(WDIR + DIR + UNCAT_DIR + "/" + vul_dir):
        os.mkdir(WDIR + DIR + UNCAT_DIR + "/" + vul_dir)

exploit_contracts_path = WDIR + DIR + EXP_DIR
unexploit_contracts_path = WDIR + DIR + UNEXP_DIR
unknown_contracts_path = WDIR + DIR + UNK_DIR
uncategorized_contracts_path = WDIR + DIR + UNCAT_DIR
log_path = WDIR + DIR + "/log"
# Make a request to the Etherscan API to get the contract source code

def download_contracts(csv_list, path, type):
    for csv_file in csv_list:
        with open(WDIR + "/categorized/" + type + "/" + csv_file, "r") as file:
            # Read the file as a CSV
            reader = csv.DictReader(file)
            for vul_dir in VULN_DIR_LIST:
                if vul_dir == csv_file.split(".")[0]:
                    path = path + "/" + vul_dir
            # Iterate over the rows
            for row in reader:
                contract_address = row["contract_address"]
                if "overlap" in row:
                    id = "".join(row["overlap"].split())
                else:
                    id = "None"
                # Make a request to the Etherscan API to get the contract source code
                if not id:
                    id = "None"
                time.sleep(SLEEP_TIME)
                url = f"https://api.etherscan.io/api?module=contract&action=getsourcecode&address={contract_address}&apikey={API_KEY}"
                response = requests.get(url)
                # Check if the request was successful
                if response.status_code == 200:
                    # Get the contract source code from the response
                    contract_code = response.json()["result"][0]["SourceCode"]
                    contract_name = response.json()["result"][0]["ContractName"]
                    # Write the contract source code to a file
                    with open(f"{path}/{contract_name}_{id}_{contract_address}.sol", "w") as outfile:
                        outfile.write(contract_code)
                        outfile.close()
                    # Date and time in ISO format
                    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
                    with open(f"{log_path}/log_{TIME}.log", "a") as logfile:
                        logfile.write(f"{timestamp} INFO Downloaded contract {contract_address} with response code {response.status_code} to {path}/{contract_name}_{id}_{contract_address}.sol\n")
                        logfile.close()
                else:
                    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
                    with open(f"{log_path}/log_{TIME}.log", "a") as logfile:
                        logfile.write(f"{timestamp} ERROR Failed to download contract {contract_address} with response code {response.status_code}\n")
                        logfile.close()
        path = os.path.split(path)[0]

if __name__ == "__main__":
    download_contracts(exploitable_csv, exploit_contracts_path, "exploitable")
    download_contracts(unexploitable_csv, unexploit_contracts_path, "unexploitable")
    #download_contracts(unknown_label_csv, unknown_contracts_path, "unknown_label")
    download_contracts(uncategorized_csv, uncategorized_contracts_path, "uncategorized")
